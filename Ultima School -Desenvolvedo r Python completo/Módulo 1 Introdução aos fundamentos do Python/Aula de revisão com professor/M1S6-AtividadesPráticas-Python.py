# -*- coding: utf-8 -*-
"""M1S6-AtividadesPráticas-Jupyter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j4RRARcvDZsBZYBuEfGCSiNySjhJuWsn

#**Revisão do conteúdo até M1S3**

*   Variáveis
*   Operações Básicas (+, -, *, /) | (> < == !=) | (and or not)
*   Estruturas condicionais (if | elif | else)
*   Estruturas de Repetição (while | for)
"""

#Exemplo 1 - Operações Básicas
"""Faça um programa para computar a média de um aluno, dadas duas notas."""
nota1 = float(input("Digite a nota 1: "))
nota2 = float(input("Digite a nota 2: "))
media = (nota1 + nota2) / 2
print(f"Média: {media}")

#Exemplo 2 - Estruturas condicionais
"""Faça um programa para computar a média de um aluno e verificar se este aluno foi aprovado, reprovado ou está de recuperação."""
#Obtenção e validação de dados
nota1 = float(input("Digite a nota 1: "))
while nota1 < 0 or nota1 > 10:
  print("A nota é inválida! Digite uma nota entre 0 e 10.")
  nota1 = float(input("Digite a nota 1: "))

nota2 = float(input("Digite a nota 2: "))
while nota2 < 0 or nota2 > 10:
  print("A nota é inválida! Digite uma nota entre 0 e 10.")
  nota2 = float(input("Digite a nota 2: "))

#Calculando a média
media = (nota1 + nota2) / 2
print(f"Média: {media}")

#Verificar a condição do aluno
if (media >= 7) and (media <= 10):
  print("Aprovado!")
elif (media >= 0) and (media < 5):
  print("Reprovado!")
elif (media >= 5) and (media < 7):
  print("Recuperação!")
else:
  print("Operação inválida!")

#Exemplo3 - Estruturas de Repetição
"""Faça um programa para computar a média de N alunos e contar a quantidade de alunos aprovados, reprovados e de recuperação."""
executando = True

while executando:
  print("1) Calcular média, 2) Finalizar")
  opcao = input("Digite a opção desejada: ")

  if opcao == '1':
    #Obtenção e validação de dados
    nota1 = float(input("Digite a nota 1: "))
    nota2 = float(input("Digite a nota 2: "))

    #Calculando a média
    media = (nota1 + nota2) / 2
    print(f"Média: {media}")

    #Verificar a condição do aluno
    if (media >= 7) and (media <= 10):
      print("Aprovado!")
    elif (media >= 0) and (media < 5):
      print("Reprovado!")
    elif (media >= 5) and (media < 7):
      print("Recuperação!")
    else:
      print("Operação inválida!")

  elif opcao == '2':
    print("Programa finalizado!")
    #Pode ser utilizado para finalizar o loop, ou então mudar a variável de condição para False
    executando = False
    #break

  else:
    print("Opção inválida!")

#Motivação para Listas
nota1 = 9.5
nota2 = 4.5
nota3 = 7.8
print(nota2)

"""#**Revisão do conteúdo semanal (M1S4)**

*   Listas
*   Tuplas
*   Dicionários
*   Funções
*   Classes e POO

##Listas
"""

#Indices  0    1    2
notas = [9.5, 4.5, 7.8]
print(notas[1])

notas.append(9.9)
print(notas)

notas = [] #Armazenar as notas dos alunos

while True:
  print("1) Calcular média, 2) Ver médias, 0) Finalizar")
  opcao = input("Digite a opção desejada: ")

  if opcao == '1':
    #Obtenção e validação de dados
    nome = input("Digite o nome do aluno: ")
    nota1 = float(input("Digite a nota 1: "))
    nota2 = float(input("Digite a nota 2: "))

    #Calculando a média
    media = (nota1 + nota2) / 2
    print(f"Média: {media}")

    notas.append([nome, nota1, nota2, media])

    #Verificar a condição do aluno
    if (media >= 7) and (media <= 10):
      print("Aprovado!")
    elif (media >= 0) and (media < 5):
      print("Reprovado!")
    elif (media >= 5) and (media < 7):
      print("Recuperação!")
    else:
      print("Operação inválida!")

  elif opcao == '2':
    print(f"Medias:")
    for aluno in notas:
      print(f"Nome: {aluno[0]}, Nota 1: {aluno[1]}, Nota 2: {aluno[2]}, MÉDIA: {aluno[3]}")

  elif opcao == '0':
    print("Programa finalizado!")
    break

  else:
    print("Opção inválida!")

print(notas)

"""##Tuplas"""

#Imutáveis
notas = (1, 4, 9.5)
notas[0] = 10 #Causar um erro, pois tuplas não permitem manipulação nos dados internos (Imutável)

"""##Dicionários"""

aluno = {}
aluno["Nome"] = "Sherlon"
aluno["Nota1"] = 9.5
print(aluno) #Mostra TODO o conteúdo do dicionário
print(f"Nome: {aluno['Nome']}") #Filtra pela chave desejada "Nome"

alunos = [] #Armazenar as notas dos alunos

while True:
  print("1) Calcular média, 2) Ver médias, 0) Finalizar")
  opcao = input("Digite a opção desejada: ")

  if opcao == '1':
    #Obtenção e validação de dados
    nome = input("Digite o nome do aluno: ")
    nota1 = float(input("Digite a nota 1: "))
    nota2 = float(input("Digite a nota 2: "))

    #Calculando a média
    media = (nota1 + nota2) / 2
    print(f"Média: {media}")

    #Verificar a condição do aluno
    if (media >= 7) and (media <= 10):
      status = "Aprovado!"
    elif (media >= 0) and (media < 5):
      status = "Reprovado!"
    elif (media >= 5) and (media < 7):
      status = "Recuperação!"

    print(status)

    aluno_atual = {}
    aluno_atual["Nome"] = nome
    aluno_atual["Nota1"] = nota1
    aluno_atual["Nota2"] = nota2
    aluno_atual["Media"] = media
    aluno_atual["Status"] = status
    alunos.append(aluno_atual)

  elif opcao == '2':
    print(f"Medias:")
    for aluno in alunos:
      print(f"Nome: {aluno['Nome']}, Nota 1: {aluno['Nota1']}, Nota 2: {aluno['Nota2']}, MÉDIA: {aluno['Media']}, Status: {aluno['Status']}")

  elif opcao == '0':
    print("Programa finalizado!")
    break

  else:
    print("Opção inválida!")

"""##Funções"""

#Atualizando variáveis Globais
def comprar():
  global total
  total += float(input("Digite o valor do produto: "))

total = 0 #Variavel Global
for i in range(3):
  comprar()
print(total)

#Atualizando variáveis por parâmetro
def comprar(parcial):
  parcial += float(input("Digite o valor do produto: "))
  return parcial

total = 0 #Variavel Global
total = comprar(total)
total = comprar(total)
total = comprar(total)
print(total)

#Exemplo 4
"""Faça uma função para computar e retornar a média de 2 números."""
def verificar_aprovacao(media):
  if (media >= 7) and (media <= 10):
    status = "Aprovado!"
  elif (media >= 0) and (media < 5):
    status = "Reprovado!"
  elif (media >= 5) and (media < 7):
    status = "Recuperação!"
  return status

def cadastrar_aluno(alunos):
  #Obtenção e validação de dados
  nome = input("Digite o nome do aluno: ")
  nota1 = float(input("Digite a nota 1: "))
  nota2 = float(input("Digite a nota 2: "))

  #Calculando a média
  media = (nota1 + nota2) / 2
  print(f"Média: {media}")

  #Verificar a condição do aluno
  status = verificar_aprovacao(media)

  #Cadastra o aluno na lista de alunos
  aluno_atual = {}
  aluno_atual["Nome"] = nome
  aluno_atual["Nota1"] = nota1
  aluno_atual["Nota2"] = nota2
  aluno_atual["Media"] = media
  aluno_atual["Status"] = status
  alunos.append(aluno_atual)

def mostrar_dados(alunos):
  print(f"Medias:")
  for aluno in alunos:
    print(f"Nome: {aluno['Nome']}, Nota 1: {aluno['Nota1']}, Nota 2: {aluno['Nota2']}, MÉDIA: {aluno['Media']}, Status: {aluno['Status']}")

alunos = [] #Armazenar as notas dos alunos

while True:
  print("1) Calcular média, 2) Ver médias, 0) Finalizar")
  opcao = input("Digite a opção desejada: ")

  if opcao == '1':
    cadastrar_aluno(alunos)

  elif opcao == '2':
    mostrar_dados(alunos)

  elif opcao == '0':
    print("Programa finalizado!")
    break

  else:
    print("Opção inválida!")

"""##Classes e Programação Orientada a Objetos (POO) ([Referência](https://tmfilho.github.io/pyestbook/objects/02_cpyt.html))"""

class Pessoa:
  #Construtor (inicializa o objeto)
  def __init__(self, nome):
    #Atributos (como variáveis)
    self.name = nome

  #Metodo (como funções)
  def mostrar_nome(self):
    print(self.name)

nome = "Sherlon"
pessoa = Pessoa(nome)

pessoa.mostrar_nome()

class Aluno:
  def __init__(self):
    self.Nome = None
    self.Nota1 = None
    self.Nota2 = None
    self.Media = None
    self.Status = None

  def cadastrar_aluno(self):
    #Obtenção e validação de dados
    self.Nome = input("Digite o nome do aluno: ")
    self.Nota1 = float(input("Digite a nota 1: "))
    self.Nota2 = float(input("Digite a nota 2: "))
    self.calcular_media()
    self.verificar_aprovacao()

  def verificar_aprovacao(self):
    if (self.Media >= 7) and (self.Media <= 10):
      self.Status = "Aprovado!"
    elif (self.Media >= 0) and (self.Media < 5):
      self.Status = "Reprovado!"
    elif (self.Media >= 5) and (self.Media < 7):
      self.Status = "Recuperação!"

  def calcular_media(self):
    #Calculando a média
    self.Media = (self.Nota1 + self.Nota2) / 2
    print(f"Média: {self.Media}")

  def mostrar_dados(self):
    print(f"Nome: {self.Nome}, Nota 1: {self.Nota1}, Nota 2: {self.Nota2}, MÉDIA: {self.Media}, Status: {self.Status}")

alunos = [] #Armazenar as notas dos alunos

while True:
  print("1) Calcular média, 2) Ver médias, 0) Finalizar")
  opcao = input("Digite a opção desejada: ")

  if opcao == '1':
    aluno_atual = Aluno() #Instanciando um objeto da classe Aluno
    aluno_atual.cadastrar_aluno()
    alunos.append(aluno_atual)

  elif opcao == '2':
    print(f"Médias:")
    for aluno in alunos:
      aluno.mostrar_dados()

  elif opcao == '0':
    print("Programa finalizado!")
    break

  else:
    print("Opção inválida!")

"""#Prática Colaborativa (DOJO)

Uma revendedora de veículos usados precisa da sua ajuda para desenvolver um sistema de armazenamento de informações e realização de consultas em sua relação de carros e motos à pronta entrega.

Você precisa:
*   Criar uma classe Veículos com os seguintes atributos:
    *   ID: 25 (Identificação única no estoque)
    *   Tipo: Carro, Moto, etc...
    *   Marca: Chevrolet, etc...
    *   Modelo: Monza, etc...
    *   Placa: ABC0311
    *   Número de rodas: 2, 4, etc...
    *   Ano: 2008, etc
    *   Preço: 12560.50
*   Desenvolver os seguintes métodos:
    *   Cadastrar novo veículo no Estoque.
    *   Atualizar informações de um veículo.
    *   Mostrar veículos a partir de um certo ano.
    *   Mostrar veículos a partir de um certo preço.
"""

#Código feito em aula
class Veiculo:
  #Programar a partir daqui

#Gabarito
class Veiculo:
    def __init__(self, ID):
        self.id = ID
        self.tipo = None
        self.marca = None
        self.modelo = None
        self.placa = None
        self.rodas = None
        self.ano = None
        self.preco = None
        self.cor = None

    def cadastro(self):
      self.tipo = input("Digite o tipo do veiculo: ")
      #self.marca = input("Digite a marca: ")
      #self.modelo = input("Digite o modelo: ")
      #self.placa = input("Digite a placa: ")
      #self.rodas = int(input("Informe a quantidade de rodas: "))
      self.ano = int(input("Informe o ano: "))
      self.preco = float(input("Informe o preço: "))
      #self.cor = input("Informe a cor: ")

    def mostra_veiculo(self):
      print(self.tipo)
      #print(self.marca)
      #print(self.modelo)
      #print(self.placa)
      #print(self.rodas)
      print(self.ano)
      print(self.preco)
      #print(self.cor)

    def filtra_por_ano(self, ano):
      if self.ano > ano:
        self.mostra_veiculo()

    def filtra_por_preco(self, preco):
      if self.preco > preco:
        self.mostra_veiculo()

    def atualizar_cadastro(self):
      self.cadastro()

id = 0 #É um numero único para ser o código de cada veículo
estoque = [] #Armazena todos os veículos do estoque
while True:
  #Cria um objeto da classe Veiculo()
  obj = Veiculo(id)

  print("---------- Seja bem-vindo à concessionária PD12 ----------")
  print("Opções:\n1-Cadastro,\n2-Visualizar por ano,\n3-Visualizar por preco,\n4-Atualizar cadastro\n0-SAIR\n")
  opcao = int(input("Digite o que você deseja: "))

  #Sair do programa
  if opcao == 0:
    print("Obrigado por usar nosso sistema! Até mais!")
    break

  #Cadastro
  elif opcao == 1:
    print("---------- CADASTRO DE VEÍCULOS ----------")
    obj.cadastro()
    estoque.append(obj)
    id += 1

  #Mostrar por ano
  elif opcao == 2:
    print("---------- FILTRANDO POR ANO ----------")
    ano = int(input("Digite um ano: "))
    tamanho = len(estoque)
    for i in range(tamanho):
      estoque[i].filtra_por_ano(ano)
      print("")

  #Mostrar por preco
  elif opcao == 3:
    print("---------- FILTRANDO POR PRECO ----------")
    preco = int(input("Digite um preco minimo: "))
    tamanho = len(estoque)
    for i in range(tamanho):
      estoque[i].filtra_por_preco(preco)
      print("")

  #Atualiza cadastro
  elif opcao == 4:
    print("---------- ATUALIZAÇÃO DE CADASTRO ----------")
    codigo = int(input("Digite o ID do veículo a ser modificado: "))

    tamanho = len(estoque)
    for i in range(tamanho):
      if estoque[i].id == codigo:
        estoque[i].atualizar_cadastro() #Atualizamos o cadastro de um veiculo dado o seu código (CASO ELE EXISTA)

  else:
    print("Esta opção não é válida!")